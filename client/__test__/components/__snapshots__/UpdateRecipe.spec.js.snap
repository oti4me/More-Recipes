// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Update recipe form suit Should render Update recipe page component without exploding 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UpdateRecipePage
    error={Object {}}
    getRecipe={[MockFunction]}
    history={Object {}}
    loggedIn={true}
    match={
      Object {
        "params": Object {
          "id": 1,
        },
      }
    }
    recipeDetails={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
          Array [
            1,
          ],
        ],
      }
    }
    updateRecipe={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
            Object {
              "description": "",
              "direction": "",
              "imageUrl": "",
              "ingredients": "",
              "isImageChanged": false,
              "title": "",
              "undefined": undefined,
            },
            Object {
              "toast": [MockFunction],
            },
          ],
          Array [
            1,
            Object {
              "description": "",
              "direction": "",
              "imageUrl": "/images/no-preview-available.png",
              "ingredients": "",
              "isImageChanged": false,
              "title": "",
              "undefined": undefined,
            },
            Object {
              "toast": [MockFunction],
            },
          ],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(Header)
          error={Object {}}
          getRecipe={[MockFunction]}
          history={Object {}}
          loggedIn={true}
          match={
            Object {
              "params": Object {
                "id": 1,
              },
            }
          }
          recipeDetails={
            [MockFunction] {
              "calls": Array [
                Array [
                  1,
                ],
                Array [
                  1,
                ],
              ],
            }
          }
          updateRecipe={
            [MockFunction] {
              "calls": Array [
                Array [
                  1,
                  Object {
                    "description": "",
                    "direction": "",
                    "imageUrl": "",
                    "ingredients": "",
                    "isImageChanged": false,
                    "title": "",
                    "undefined": undefined,
                  },
                  Object {
                    "toast": [MockFunction],
                  },
                ],
                Array [
                  1,
                  Object {
                    "description": "",
                    "direction": "",
                    "imageUrl": "/images/no-preview-available.png",
                    "ingredients": "",
                    "isImageChanged": false,
                    "title": "",
                    "undefined": undefined,
                  },
                  Object {
                    "toast": [MockFunction],
                  },
                ],
              ],
            }
          }
        />,
        <div
          className="container cont"
        >
          <Connect(UpdateRecipeForm)
            error={Object {}}
            getRecipe={[MockFunction]}
            history={Object {}}
            loggedIn={true}
            match={
              Object {
                "params": Object {
                  "id": 1,
                },
              }
            }
            recipeDetails={
              [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                  ],
                  Array [
                    1,
                  ],
                ],
              }
            }
            updateRecipe={
              [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "/images/no-preview-available.png",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                ],
              }
            }
          />
        </div>,
        <Footer />,
      ],
      "className": "main",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "error": Object {},
          "getRecipe": [MockFunction],
          "history": Object {},
          "loggedIn": true,
          "match": Object {
            "params": Object {
              "id": 1,
            },
          },
          "recipeDetails": [MockFunction] {
            "calls": Array [
              Array [
                1,
              ],
              Array [
                1,
              ],
            ],
          },
          "updateRecipe": [MockFunction] {
            "calls": Array [
              Array [
                1,
                Object {
                  "description": "",
                  "direction": "",
                  "imageUrl": "",
                  "ingredients": "",
                  "isImageChanged": false,
                  "title": "",
                  "undefined": undefined,
                },
                Object {
                  "toast": [MockFunction],
                },
              ],
              Array [
                1,
                Object {
                  "description": "",
                  "direction": "",
                  "imageUrl": "/images/no-preview-available.png",
                  "ingredients": "",
                  "isImageChanged": false,
                  "title": "",
                  "undefined": undefined,
                },
                Object {
                  "toast": [MockFunction],
                },
              ],
            ],
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Connect(UpdateRecipeForm)
            error={Object {}}
            getRecipe={[MockFunction]}
            history={Object {}}
            loggedIn={true}
            match={
              Object {
                "params": Object {
                  "id": 1,
                },
              }
            }
            recipeDetails={
              [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                  ],
                  Array [
                    1,
                  ],
                ],
              }
            }
            updateRecipe={
              [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "/images/no-preview-available.png",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                ],
              }
            }
          />,
          "className": "container cont",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "error": Object {},
            "getRecipe": [MockFunction],
            "history": Object {},
            "loggedIn": true,
            "match": Object {
              "params": Object {
                "id": 1,
              },
            },
            "recipeDetails": [MockFunction] {
              "calls": Array [
                Array [
                  1,
                ],
                Array [
                  1,
                ],
              ],
            },
            "updateRecipe": [MockFunction] {
              "calls": Array [
                Array [
                  1,
                  Object {
                    "description": "",
                    "direction": "",
                    "imageUrl": "",
                    "ingredients": "",
                    "isImageChanged": false,
                    "title": "",
                    "undefined": undefined,
                  },
                  Object {
                    "toast": [MockFunction],
                  },
                ],
                Array [
                  1,
                  Object {
                    "description": "",
                    "direction": "",
                    "imageUrl": "/images/no-preview-available.png",
                    "ingredients": "",
                    "isImageChanged": false,
                    "title": "",
                    "undefined": undefined,
                  },
                  Object {
                    "toast": [MockFunction],
                  },
                ],
              ],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Header)
            error={Object {}}
            getRecipe={[MockFunction]}
            history={Object {}}
            loggedIn={true}
            match={
              Object {
                "params": Object {
                  "id": 1,
                },
              }
            }
            recipeDetails={
              [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                  ],
                  Array [
                    1,
                  ],
                ],
              }
            }
            updateRecipe={
              [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "/images/no-preview-available.png",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                ],
              }
            }
          />,
          <div
            className="container cont"
          >
            <Connect(UpdateRecipeForm)
              error={Object {}}
              getRecipe={[MockFunction]}
              history={Object {}}
              loggedIn={true}
              match={
                Object {
                  "params": Object {
                    "id": 1,
                  },
                }
              }
              recipeDetails={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      1,
                    ],
                    Array [
                      1,
                    ],
                  ],
                }
              }
              updateRecipe={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      1,
                      Object {
                        "description": "",
                        "direction": "",
                        "imageUrl": "",
                        "ingredients": "",
                        "isImageChanged": false,
                        "title": "",
                        "undefined": undefined,
                      },
                      Object {
                        "toast": [MockFunction],
                      },
                    ],
                    Array [
                      1,
                      Object {
                        "description": "",
                        "direction": "",
                        "imageUrl": "/images/no-preview-available.png",
                        "ingredients": "",
                        "isImageChanged": false,
                        "title": "",
                        "undefined": undefined,
                      },
                      Object {
                        "toast": [MockFunction],
                      },
                    ],
                  ],
                }
              }
            />
          </div>,
          <Footer />,
        ],
        "className": "main",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "error": Object {},
            "getRecipe": [MockFunction],
            "history": Object {},
            "loggedIn": true,
            "match": Object {
              "params": Object {
                "id": 1,
              },
            },
            "recipeDetails": [MockFunction] {
              "calls": Array [
                Array [
                  1,
                ],
                Array [
                  1,
                ],
              ],
            },
            "updateRecipe": [MockFunction] {
              "calls": Array [
                Array [
                  1,
                  Object {
                    "description": "",
                    "direction": "",
                    "imageUrl": "",
                    "ingredients": "",
                    "isImageChanged": false,
                    "title": "",
                    "undefined": undefined,
                  },
                  Object {
                    "toast": [MockFunction],
                  },
                ],
                Array [
                  1,
                  Object {
                    "description": "",
                    "direction": "",
                    "imageUrl": "/images/no-preview-available.png",
                    "ingredients": "",
                    "isImageChanged": false,
                    "title": "",
                    "undefined": undefined,
                  },
                  Object {
                    "toast": [MockFunction],
                  },
                ],
              ],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Connect(UpdateRecipeForm)
              error={Object {}}
              getRecipe={[MockFunction]}
              history={Object {}}
              loggedIn={true}
              match={
                Object {
                  "params": Object {
                    "id": 1,
                  },
                }
              }
              recipeDetails={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      1,
                    ],
                    Array [
                      1,
                    ],
                  ],
                }
              }
              updateRecipe={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      1,
                      Object {
                        "description": "",
                        "direction": "",
                        "imageUrl": "",
                        "ingredients": "",
                        "isImageChanged": false,
                        "title": "",
                        "undefined": undefined,
                      },
                      Object {
                        "toast": [MockFunction],
                      },
                    ],
                    Array [
                      1,
                      Object {
                        "description": "",
                        "direction": "",
                        "imageUrl": "/images/no-preview-available.png",
                        "ingredients": "",
                        "isImageChanged": false,
                        "title": "",
                        "undefined": undefined,
                      },
                      Object {
                        "toast": [MockFunction],
                      },
                    ],
                  ],
                }
              }
            />,
            "className": "container cont",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "error": Object {},
              "getRecipe": [MockFunction],
              "history": Object {},
              "loggedIn": true,
              "match": Object {
                "params": Object {
                  "id": 1,
                },
              },
              "recipeDetails": [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                  ],
                  Array [
                    1,
                  ],
                ],
              },
              "updateRecipe": [MockFunction] {
                "calls": Array [
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                  Array [
                    1,
                    Object {
                      "description": "",
                      "direction": "",
                      "imageUrl": "/images/no-preview-available.png",
                      "ingredients": "",
                      "isImageChanged": false,
                      "title": "",
                      "undefined": undefined,
                    },
                    Object {
                      "toast": [MockFunction],
                    },
                  ],
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Update recipe page suit Should render update recipe component without exploding 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(UpdateRecipeForm)
    error={Object {}}
    getRecipe={[MockFunction]}
    history={Object {}}
    loggedIn={true}
    match={
      Object {
        "params": Object {
          "id": 1,
        },
      }
    }
    recipeDetails={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    updateRecipe={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "error": Object {},
      "getRecipe": [MockFunction],
      "history": Object {},
      "isRequesting": undefined,
      "loggedIn": true,
      "match": Object {
        "params": Object {
          "id": 1,
        },
      },
      "recipe": undefined,
      "recipeDetails": [Function],
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "storeSubscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      },
      "updateRecipe": [Function],
      "updatedRecipe": undefined,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "error": Object {},
        "getRecipe": [MockFunction],
        "history": Object {},
        "isRequesting": undefined,
        "loggedIn": true,
        "match": Object {
          "params": Object {
            "id": 1,
          },
        },
        "recipe": undefined,
        "recipeDetails": [Function],
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        },
        "updateRecipe": [Function],
        "updatedRecipe": undefined,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Update recipe page suit Should render update recipe page component without exploding 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UpdateRecipeForm
    error={Object {}}
    getRecipe={[MockFunction]}
    history={Object {}}
    loggedIn={true}
    match={
      Object {
        "params": Object {
          "id": 1,
        },
      }
    }
    recipeDetails={
      [MockFunction] {
        "calls": Array [
          Array [
            1,
          ],
        ],
      }
    }
    updateRecipe={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h4
          className="top-margin-40"
        >
          Edit Recipe
        </h4>,
        <hr />,
        <form
          id="update"
          onSubmit={[Function]}
        >
          <div
            className="col s12 m4 l4 "
          >
            <div
              className="input-field col s12"
            >
              <input
                className="active"
                id="title"
                name="title"
                onChange={[Function]}
                type="text"
                value=""
              />
              <label
                className="active"
                htmlFor="title"
              >
                Name of Recipe
              </label>
            </div>
            <div
              className="input-field col s12"
            >
              <input
                className="active"
                id="description"
                name="description"
                onChange={[Function]}
                type="text"
                value=""
              />
              <label
                className="active"
                htmlFor="description"
              >
                Description
              </label>
            </div>
            <div
              className="input-field col s12"
            >
              <textarea
                className="materialize-textarea active"
                id="ingredients"
                name="ingredients"
                onChange={[Function]}
                value=""
              />
              <label
                className="active"
                htmlFor="ingridience"
              >
                Ingrdients
              </label>
            </div>
            <div
              className="input-field col s12"
            >
              <textarea
                className="materialize-textarea active"
                id="direction"
                name="direction"
                onChange={[Function]}
                value=""
              />
              <label
                className="active"
                htmlFor="direction"
              >
                Direction
              </label>
            </div>
            <div
              className="file-field input-field col s12"
            >
              <div
                className="btn color-dark-gray"
              >
                <span>
                  Image
                </span>
                <input
                  className="active"
                  id="img"
                  name="image"
                  onChange={[Function]}
                  type="file"
                />
              </div>
              <div
                className="file-path-wrapper"
              >
                <input
                  className="file-path validate active"
                  name=""
                  placeholder="Select Recipe Image"
                  type="text"
                />
              </div>
            </div>
            <br />
            <br />
            <div
              className="input-field col s12"
            >
              <Link
                className="waves-effect waves-light btn"
                onClick={[Function]}
                replace={false}
                to="#"
              >
                Edit Recipe
              </Link>
              
              <br />
              <br />
            </div>
          </div>
        </form>,
        <div
          className="col s12 m4 l4"
        >
          <div
            className="img2 top-margin-40"
          >
            <img
              alt="."
              id="img3"
              src=""
              style={
                Object {
                  "color": "#fff",
                  "height": "400px",
                  "maxHeight": "300px",
                  "maxWidth": "300px",
                  "width": "300px",
                }
              }
            />
          </div>
        </div>,
      ],
      "className": "row",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Edit Recipe",
          "className": "top-margin-40",
        },
        "ref": null,
        "rendered": "Edit Recipe",
        "type": "h4",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col s12 m4 l4 "
          >
            <div
              className="input-field col s12"
            >
              <input
                className="active"
                id="title"
                name="title"
                onChange={[Function]}
                type="text"
                value=""
              />
              <label
                className="active"
                htmlFor="title"
              >
                Name of Recipe
              </label>
            </div>
            <div
              className="input-field col s12"
            >
              <input
                className="active"
                id="description"
                name="description"
                onChange={[Function]}
                type="text"
                value=""
              />
              <label
                className="active"
                htmlFor="description"
              >
                Description
              </label>
            </div>
            <div
              className="input-field col s12"
            >
              <textarea
                className="materialize-textarea active"
                id="ingredients"
                name="ingredients"
                onChange={[Function]}
                value=""
              />
              <label
                className="active"
                htmlFor="ingridience"
              >
                Ingrdients
              </label>
            </div>
            <div
              className="input-field col s12"
            >
              <textarea
                className="materialize-textarea active"
                id="direction"
                name="direction"
                onChange={[Function]}
                value=""
              />
              <label
                className="active"
                htmlFor="direction"
              >
                Direction
              </label>
            </div>
            <div
              className="file-field input-field col s12"
            >
              <div
                className="btn color-dark-gray"
              >
                <span>
                  Image
                </span>
                <input
                  className="active"
                  id="img"
                  name="image"
                  onChange={[Function]}
                  type="file"
                />
              </div>
              <div
                className="file-path-wrapper"
              >
                <input
                  className="file-path validate active"
                  name=""
                  placeholder="Select Recipe Image"
                  type="text"
                />
              </div>
            </div>
            <br />
            <br />
            <div
              className="input-field col s12"
            >
              <Link
                className="waves-effect waves-light btn"
                onClick={[Function]}
                replace={false}
                to="#"
              >
                Edit Recipe
              </Link>
              
              <br />
              <br />
            </div>
          </div>,
          "id": "update",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="input-field col s12"
              >
                <input
                  className="active"
                  id="title"
                  name="title"
                  onChange={[Function]}
                  type="text"
                  value=""
                />
                <label
                  className="active"
                  htmlFor="title"
                >
                  Name of Recipe
                </label>
              </div>,
              <div
                className="input-field col s12"
              >
                <input
                  className="active"
                  id="description"
                  name="description"
                  onChange={[Function]}
                  type="text"
                  value=""
                />
                <label
                  className="active"
                  htmlFor="description"
                >
                  Description
                </label>
              </div>,
              <div
                className="input-field col s12"
              >
                <textarea
                  className="materialize-textarea active"
                  id="ingredients"
                  name="ingredients"
                  onChange={[Function]}
                  value=""
                />
                <label
                  className="active"
                  htmlFor="ingridience"
                >
                  Ingrdients
                </label>
              </div>,
              <div
                className="input-field col s12"
              >
                <textarea
                  className="materialize-textarea active"
                  id="direction"
                  name="direction"
                  onChange={[Function]}
                  value=""
                />
                <label
                  className="active"
                  htmlFor="direction"
                >
                  Direction
                </label>
              </div>,
              <div
                className="file-field input-field col s12"
              >
                <div
                  className="btn color-dark-gray"
                >
                  <span>
                    Image
                  </span>
                  <input
                    className="active"
                    id="img"
                    name="image"
                    onChange={[Function]}
                    type="file"
                  />
                </div>
                <div
                  className="file-path-wrapper"
                >
                  <input
                    className="file-path validate active"
                    name=""
                    placeholder="Select Recipe Image"
                    type="text"
                  />
                </div>
              </div>,
              <br />,
              <br />,
              <div
                className="input-field col s12"
              >
                <Link
                  className="waves-effect waves-light btn"
                  onClick={[Function]}
                  replace={false}
                  to="#"
                >
                  Edit Recipe
                </Link>
                
                <br />
                <br />
              </div>,
            ],
            "className": "col s12 m4 l4 ",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    className="active"
                    id="title"
                    name="title"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />,
                  <label
                    className="active"
                    htmlFor="title"
                  >
                    Name of Recipe
                  </label>,
                ],
                "className": "input-field col s12",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "active",
                    "id": "title",
                    "name": "title",
                    "onChange": [Function],
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Name of Recipe",
                    "className": "active",
                    "htmlFor": "title",
                  },
                  "ref": null,
                  "rendered": "Name of Recipe",
                  "type": "label",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <input
                    className="active"
                    id="description"
                    name="description"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />,
                  <label
                    className="active"
                    htmlFor="description"
                  >
                    Description
                  </label>,
                ],
                "className": "input-field col s12",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "active",
                    "id": "description",
                    "name": "description",
                    "onChange": [Function],
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Description",
                    "className": "active",
                    "htmlFor": "description",
                  },
                  "ref": null,
                  "rendered": "Description",
                  "type": "label",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <textarea
                    className="materialize-textarea active"
                    id="ingredients"
                    name="ingredients"
                    onChange={[Function]}
                    value=""
                  />,
                  <label
                    className="active"
                    htmlFor="ingridience"
                  >
                    Ingrdients
                  </label>,
                ],
                "className": "input-field col s12",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "materialize-textarea active",
                    "id": "ingredients",
                    "name": "ingredients",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "textarea",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Ingrdients",
                    "className": "active",
                    "htmlFor": "ingridience",
                  },
                  "ref": null,
                  "rendered": "Ingrdients",
                  "type": "label",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <textarea
                    className="materialize-textarea active"
                    id="direction"
                    name="direction"
                    onChange={[Function]}
                    value=""
                  />,
                  <label
                    className="active"
                    htmlFor="direction"
                  >
                    Direction
                  </label>,
                ],
                "className": "input-field col s12",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "materialize-textarea active",
                    "id": "direction",
                    "name": "direction",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "textarea",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Direction",
                    "className": "active",
                    "htmlFor": "direction",
                  },
                  "ref": null,
                  "rendered": "Direction",
                  "type": "label",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="btn color-dark-gray"
                  >
                    <span>
                      Image
                    </span>
                    <input
                      className="active"
                      id="img"
                      name="image"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>,
                  <div
                    className="file-path-wrapper"
                  >
                    <input
                      className="file-path validate active"
                      name=""
                      placeholder="Select Recipe Image"
                      type="text"
                    />
                  </div>,
                ],
                "className": "file-field input-field col s12",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <span>
                        Image
                      </span>,
                      <input
                        className="active"
                        id="img"
                        name="image"
                        onChange={[Function]}
                        type="file"
                      />,
                    ],
                    "className": "btn color-dark-gray",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Image",
                      },
                      "ref": null,
                      "rendered": "Image",
                      "type": "span",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "active",
                        "id": "img",
                        "name": "image",
                        "onChange": [Function],
                        "type": "file",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="file-path validate active"
                      name=""
                      placeholder="Select Recipe Image"
                      type="text"
                    />,
                    "className": "file-path-wrapper",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "file-path validate active",
                      "name": "",
                      "placeholder": "Select Recipe Image",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Link
                    className="waves-effect waves-light btn"
                    onClick={[Function]}
                    replace={false}
                    to="#"
                  >
                    Edit Recipe
                  </Link>,
                  "",
                  <br />,
                  <br />,
                ],
                "className": "input-field col s12",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Edit Recipe",
                    "className": "waves-effect waves-light btn",
                    "onClick": [Function],
                    "replace": false,
                    "to": "#",
                  },
                  "ref": null,
                  "rendered": "Edit Recipe",
                  "type": [Function],
                },
                "",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="img2 top-margin-40"
          >
            <img
              alt="."
              id="img3"
              src=""
              style={
                Object {
                  "color": "#fff",
                  "height": "400px",
                  "maxHeight": "300px",
                  "maxWidth": "300px",
                  "width": "300px",
                }
              }
            />
          </div>,
          "className": "col s12 m4 l4",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              alt="."
              id="img3"
              src=""
              style={
                Object {
                  "color": "#fff",
                  "height": "400px",
                  "maxHeight": "300px",
                  "maxWidth": "300px",
                  "width": "300px",
                }
              }
            />,
            "className": "img2 top-margin-40",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": ".",
              "id": "img3",
              "src": "",
              "style": Object {
                "color": "#fff",
                "height": "400px",
                "maxHeight": "300px",
                "maxWidth": "300px",
                "width": "300px",
              },
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h4
            className="top-margin-40"
          >
            Edit Recipe
          </h4>,
          <hr />,
          <form
            id="update"
            onSubmit={[Function]}
          >
            <div
              className="col s12 m4 l4 "
            >
              <div
                className="input-field col s12"
              >
                <input
                  className="active"
                  id="title"
                  name="title"
                  onChange={[Function]}
                  type="text"
                  value=""
                />
                <label
                  className="active"
                  htmlFor="title"
                >
                  Name of Recipe
                </label>
              </div>
              <div
                className="input-field col s12"
              >
                <input
                  className="active"
                  id="description"
                  name="description"
                  onChange={[Function]}
                  type="text"
                  value=""
                />
                <label
                  className="active"
                  htmlFor="description"
                >
                  Description
                </label>
              </div>
              <div
                className="input-field col s12"
              >
                <textarea
                  className="materialize-textarea active"
                  id="ingredients"
                  name="ingredients"
                  onChange={[Function]}
                  value=""
                />
                <label
                  className="active"
                  htmlFor="ingridience"
                >
                  Ingrdients
                </label>
              </div>
              <div
                className="input-field col s12"
              >
                <textarea
                  className="materialize-textarea active"
                  id="direction"
                  name="direction"
                  onChange={[Function]}
                  value=""
                />
                <label
                  className="active"
                  htmlFor="direction"
                >
                  Direction
                </label>
              </div>
              <div
                className="file-field input-field col s12"
              >
                <div
                  className="btn color-dark-gray"
                >
                  <span>
                    Image
                  </span>
                  <input
                    className="active"
                    id="img"
                    name="image"
                    onChange={[Function]}
                    type="file"
                  />
                </div>
                <div
                  className="file-path-wrapper"
                >
                  <input
                    className="file-path validate active"
                    name=""
                    placeholder="Select Recipe Image"
                    type="text"
                  />
                </div>
              </div>
              <br />
              <br />
              <div
                className="input-field col s12"
              >
                <Link
                  className="waves-effect waves-light btn"
                  onClick={[Function]}
                  replace={false}
                  to="#"
                >
                  Edit Recipe
                </Link>
                
                <br />
                <br />
              </div>
            </div>
          </form>,
          <div
            className="col s12 m4 l4"
          >
            <div
              className="img2 top-margin-40"
            >
              <img
                alt="."
                id="img3"
                src=""
                style={
                  Object {
                    "color": "#fff",
                    "height": "400px",
                    "maxHeight": "300px",
                    "maxWidth": "300px",
                    "width": "300px",
                  }
                }
              />
            </div>
          </div>,
        ],
        "className": "row",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Edit Recipe",
            "className": "top-margin-40",
          },
          "ref": null,
          "rendered": "Edit Recipe",
          "type": "h4",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col s12 m4 l4 "
            >
              <div
                className="input-field col s12"
              >
                <input
                  className="active"
                  id="title"
                  name="title"
                  onChange={[Function]}
                  type="text"
                  value=""
                />
                <label
                  className="active"
                  htmlFor="title"
                >
                  Name of Recipe
                </label>
              </div>
              <div
                className="input-field col s12"
              >
                <input
                  className="active"
                  id="description"
                  name="description"
                  onChange={[Function]}
                  type="text"
                  value=""
                />
                <label
                  className="active"
                  htmlFor="description"
                >
                  Description
                </label>
              </div>
              <div
                className="input-field col s12"
              >
                <textarea
                  className="materialize-textarea active"
                  id="ingredients"
                  name="ingredients"
                  onChange={[Function]}
                  value=""
                />
                <label
                  className="active"
                  htmlFor="ingridience"
                >
                  Ingrdients
                </label>
              </div>
              <div
                className="input-field col s12"
              >
                <textarea
                  className="materialize-textarea active"
                  id="direction"
                  name="direction"
                  onChange={[Function]}
                  value=""
                />
                <label
                  className="active"
                  htmlFor="direction"
                >
                  Direction
                </label>
              </div>
              <div
                className="file-field input-field col s12"
              >
                <div
                  className="btn color-dark-gray"
                >
                  <span>
                    Image
                  </span>
                  <input
                    className="active"
                    id="img"
                    name="image"
                    onChange={[Function]}
                    type="file"
                  />
                </div>
                <div
                  className="file-path-wrapper"
                >
                  <input
                    className="file-path validate active"
                    name=""
                    placeholder="Select Recipe Image"
                    type="text"
                  />
                </div>
              </div>
              <br />
              <br />
              <div
                className="input-field col s12"
              >
                <Link
                  className="waves-effect waves-light btn"
                  onClick={[Function]}
                  replace={false}
                  to="#"
                >
                  Edit Recipe
                </Link>
                
                <br />
                <br />
              </div>
            </div>,
            "id": "update",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="input-field col s12"
                >
                  <input
                    className="active"
                    id="title"
                    name="title"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />
                  <label
                    className="active"
                    htmlFor="title"
                  >
                    Name of Recipe
                  </label>
                </div>,
                <div
                  className="input-field col s12"
                >
                  <input
                    className="active"
                    id="description"
                    name="description"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />
                  <label
                    className="active"
                    htmlFor="description"
                  >
                    Description
                  </label>
                </div>,
                <div
                  className="input-field col s12"
                >
                  <textarea
                    className="materialize-textarea active"
                    id="ingredients"
                    name="ingredients"
                    onChange={[Function]}
                    value=""
                  />
                  <label
                    className="active"
                    htmlFor="ingridience"
                  >
                    Ingrdients
                  </label>
                </div>,
                <div
                  className="input-field col s12"
                >
                  <textarea
                    className="materialize-textarea active"
                    id="direction"
                    name="direction"
                    onChange={[Function]}
                    value=""
                  />
                  <label
                    className="active"
                    htmlFor="direction"
                  >
                    Direction
                  </label>
                </div>,
                <div
                  className="file-field input-field col s12"
                >
                  <div
                    className="btn color-dark-gray"
                  >
                    <span>
                      Image
                    </span>
                    <input
                      className="active"
                      id="img"
                      name="image"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>
                  <div
                    className="file-path-wrapper"
                  >
                    <input
                      className="file-path validate active"
                      name=""
                      placeholder="Select Recipe Image"
                      type="text"
                    />
                  </div>
                </div>,
                <br />,
                <br />,
                <div
                  className="input-field col s12"
                >
                  <Link
                    className="waves-effect waves-light btn"
                    onClick={[Function]}
                    replace={false}
                    to="#"
                  >
                    Edit Recipe
                  </Link>
                  
                  <br />
                  <br />
                </div>,
              ],
              "className": "col s12 m4 l4 ",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <input
                      className="active"
                      id="title"
                      name="title"
                      onChange={[Function]}
                      type="text"
                      value=""
                    />,
                    <label
                      className="active"
                      htmlFor="title"
                    >
                      Name of Recipe
                    </label>,
                  ],
                  "className": "input-field col s12",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "active",
                      "id": "title",
                      "name": "title",
                      "onChange": [Function],
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Name of Recipe",
                      "className": "active",
                      "htmlFor": "title",
                    },
                    "ref": null,
                    "rendered": "Name of Recipe",
                    "type": "label",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <input
                      className="active"
                      id="description"
                      name="description"
                      onChange={[Function]}
                      type="text"
                      value=""
                    />,
                    <label
                      className="active"
                      htmlFor="description"
                    >
                      Description
                    </label>,
                  ],
                  "className": "input-field col s12",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "active",
                      "id": "description",
                      "name": "description",
                      "onChange": [Function],
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Description",
                      "className": "active",
                      "htmlFor": "description",
                    },
                    "ref": null,
                    "rendered": "Description",
                    "type": "label",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <textarea
                      className="materialize-textarea active"
                      id="ingredients"
                      name="ingredients"
                      onChange={[Function]}
                      value=""
                    />,
                    <label
                      className="active"
                      htmlFor="ingridience"
                    >
                      Ingrdients
                    </label>,
                  ],
                  "className": "input-field col s12",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "materialize-textarea active",
                      "id": "ingredients",
                      "name": "ingredients",
                      "onChange": [Function],
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "textarea",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Ingrdients",
                      "className": "active",
                      "htmlFor": "ingridience",
                    },
                    "ref": null,
                    "rendered": "Ingrdients",
                    "type": "label",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <textarea
                      className="materialize-textarea active"
                      id="direction"
                      name="direction"
                      onChange={[Function]}
                      value=""
                    />,
                    <label
                      className="active"
                      htmlFor="direction"
                    >
                      Direction
                    </label>,
                  ],
                  "className": "input-field col s12",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "materialize-textarea active",
                      "id": "direction",
                      "name": "direction",
                      "onChange": [Function],
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "textarea",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Direction",
                      "className": "active",
                      "htmlFor": "direction",
                    },
                    "ref": null,
                    "rendered": "Direction",
                    "type": "label",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="btn color-dark-gray"
                    >
                      <span>
                        Image
                      </span>
                      <input
                        className="active"
                        id="img"
                        name="image"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>,
                    <div
                      className="file-path-wrapper"
                    >
                      <input
                        className="file-path validate active"
                        name=""
                        placeholder="Select Recipe Image"
                        type="text"
                      />
                    </div>,
                  ],
                  "className": "file-field input-field col s12",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <span>
                          Image
                        </span>,
                        <input
                          className="active"
                          id="img"
                          name="image"
                          onChange={[Function]}
                          type="file"
                        />,
                      ],
                      "className": "btn color-dark-gray",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Image",
                        },
                        "ref": null,
                        "rendered": "Image",
                        "type": "span",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "active",
                          "id": "img",
                          "name": "image",
                          "onChange": [Function],
                          "type": "file",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <input
                        className="file-path validate active"
                        name=""
                        placeholder="Select Recipe Image"
                        type="text"
                      />,
                      "className": "file-path-wrapper",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "file-path validate active",
                        "name": "",
                        "placeholder": "Select Recipe Image",
                        "type": "text",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Link
                      className="waves-effect waves-light btn"
                      onClick={[Function]}
                      replace={false}
                      to="#"
                    >
                      Edit Recipe
                    </Link>,
                    "",
                    <br />,
                    <br />,
                  ],
                  "className": "input-field col s12",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Edit Recipe",
                      "className": "waves-effect waves-light btn",
                      "onClick": [Function],
                      "replace": false,
                      "to": "#",
                    },
                    "ref": null,
                    "rendered": "Edit Recipe",
                    "type": [Function],
                  },
                  "",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="img2 top-margin-40"
            >
              <img
                alt="."
                id="img3"
                src=""
                style={
                  Object {
                    "color": "#fff",
                    "height": "400px",
                    "maxHeight": "300px",
                    "maxWidth": "300px",
                    "width": "300px",
                  }
                }
              />
            </div>,
            "className": "col s12 m4 l4",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt="."
                id="img3"
                src=""
                style={
                  Object {
                    "color": "#fff",
                    "height": "400px",
                    "maxHeight": "300px",
                    "maxWidth": "300px",
                    "width": "300px",
                  }
                }
              />,
              "className": "img2 top-margin-40",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": ".",
                "id": "img3",
                "src": "",
                "style": Object {
                  "color": "#fff",
                  "height": "400px",
                  "maxHeight": "300px",
                  "maxWidth": "300px",
                  "width": "300px",
                },
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
